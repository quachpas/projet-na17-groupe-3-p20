Utilisateurs 

Utilisateur(
    #user_id : serial {primary key},
    longitude : float {longitude >= 0, longitude <= 360},
    latitude : float {latitude >= 0, latitude <= 360},
    zoom : int {zoom >=0, zoom <= 18},
    type : {"P", "C"}
)
        
Personne (
    #user_id => Utilisateur.user_id {primary key}, //par soucis de manipulation de l'information
    username : string {unique, not null},
    prenom : string {not null},
    nom : string {not null},
    naissance : date,
    hash_mdp : string {not null},
)

Communaute (
    #communaute_id => Utilisateur.user_id {primary key},
    nom : string {unique, not null},
    description : string,
    date_creation : date {not null}
)

Compte {
    compte_id : serial {primary key}, //par soucis de manipulation de l'information
    public_key : string,
    proprietaire => Utilisateur.user_id,
}

SavoirFaire (
    #nom : string {nom < 30 caractères}
)
Competence (
    #savoirfaire => SavoirFaire.nom,
    #porteur => Utilisateur.user_id,
    degre : integer IN [1..5]
    PRIMARY KEY (savoirfaire, porteur)
)

DeclarationAppartenance (
    #declarant => Utilisateur.user_id,
    #communaute => Utilisateur.user_id,
    declarant_type => Utilisateur.type,
    communaute_type => Utilisateur.type,
    validité : bool,
    PRIMARY KEY(declarant, communaute)
)

Opposition {

    #detracteur => Utilisateur.user_id,
    #declarant => Utilisateur.user_id,
    #communaute => Utilisateur.user_id,
    detracteur_type => Utilisateur.type,
    declarant_type => Utilisateur.type,
    communaute_type => Utilisateur.type,
    PRIMARY KEY(detracteur, declarant, communaute)
}

Lien (
    #emetteur => Utilisateur.user_id,
    #recepteur => Utilisateur.user_id,
    emetteur_type => Utilisateur.type,
    recepteur_type => Utilisateur.type,
    description : string,
    PRIMARY KEY (emetteur, recepteur)
)
/* Contraintes
Emetteur et recepteurs sont de même type.
*/

Messagerie

Conversation (
    #conversation_id : serial {primary key},
    dernier_message =>Message.message_id,
)
//choix de faire une classe Participant (alors que tout pourrait être dans la table message), afin de pouvoir plus facilement étendre l'application (ajout de conversations de groupes)
Participant (
    #utilisateur => Utilisateur.user_id,
    #conversation_id => Conversation.conversation_id,
    PRIMARY KEY (utilisateur, conversation_id)
)

Message (
    #message_id : serial {primary key},
    #Conversation=> Conversation.conversation_id {primary key},
    expeditaire => Utilisateur.user_id,
    contenu : string {not null},
    date_creation : date {not null}
)

Reference (
    #referenceur=>Message.message_id,
    #reference=>Message.message_id,
    PRIMARY KEY(referenceur, reference)
)

Service

Service {
    #service_id : integer,
    auteur => utilisateur.user_id,
    nom : string,
    description : string,
    date_publication : date,
    montant : float,
    desc_contre_partie : string,
    contre_partie=> Service.service_id,
    nombre_max : integer,
    type : {'SC','C','AC'} {not null},
}
    
    /*  
    if type = 'AC' then  (desc_contre_partie XOR contre_partie) AND montant NULL
    if type = 'C' then montant not NULL AND desc_contre_partie NULL AND contre_partie NULL
    if type = 'SC' then desc_contre_partie NULL AND montant NULL AND contre_partie NULL
    */
        
Specialisation (
    #savoirfaire => SavoirFaire.nom,
    #service=>Service.id_service,
    PRIMARY KEY(savoirfaire, service)
)

Realisateurs (
    #service_id => service.service_id,
    #user_id => utilisateurs.user_id,
    PRIMARY KEY (service_id, user_id)
)

Vues

- VUE COMMUNAUTE : permet pour chaque personne d'avoir la liste des communautés auxquelles il déclare appartenir avec un booléen qui détermine si la personne est exclue ou non.

    R1 = JOINTURE(Personne, DeclarationAppartenance, Personne.user_id = DeclarationAppartenance.user_id)
    R2 = RESTRICTION(R1, R1.validite = TRUE)
    R3 = JOINTURE(Communaute, R3, Communaute.communaute_id = R3.communaute)

    vCommunaute = PROJECTION(R2, R2.communaute_id, R2.nom, R2.description, R2.date_creation, R2.validite)

- VUE MESSAGE : permet de visualiser chaque message en ajoutant l'identifiant du message d'origine lorsque le message s'inscrit dans un fil historique. Par exemple si C → B → A alors on veut voir la référence à A lorsqu'on affiche C

    R0 = JOINTURE(Message, Reference, Message.message_id = Reference.referenceur)
    R1 = PROJECTION(R0, R0.contenu, R0.message_id, R0.referenceur AS reference1, R0.reference AS reference2)
    // Tant que toutes les references2 ne sont pas nulles (tant qu'il existe une référence on a pas trouvé la première référence)
    WHILE (RESTRICTION(R1, R1.reference1) <> NULL) DO
        // On sauvegarde la reference2
        UPDATE(RESTRICTION(R1, R1.reference2 <> NULL)) SET R1.reference1 = R1.reference2
        // On cherche la référence de la référence2. Jointure droite pour avoir les NULL
        R2 = JOINTURE DROITE(RESTRICTION(R1, R1.reference2 <> NULL), reference, R1.reference2 = reference.referenceur)
        // On met à jour la référence2 par la référence qu'on a trouvé
        UPDATE(RESTRICTION(R1, R1.reference2 <> NULL)) SET R1.reference2 = R2.reference
    // On obtient à la fin un tableau avec l'id du message d'origine, et la référence finale.
    // On cherche le message de la référence
    R3 = JOINTURE(R1, Message, R1.reference1 = Message.message_id)
    vMessage = PROJECTION(R3, 
    R3.R1.message_id AS id_message_original, 
    R3.R1.contenu AS contenu_message_original,
    R3.Message.message_id AS id_message_reference,
    R3.Message.contenu AS contenu_message_reference
    )


- VUE PROCHE : permet de visualiser les communautés et personnes proches de chaque personne et communauté (à une distance inférieure à 1km)
    /* 1 seconde d'arc = 30,92 m 
    1 seconde d'arc = 1/60
    32,341526 seconde d'arc = 1km
    32,341526/60 = 0,53903
    Dans une distance inférieure à 1km si +/- 0,53902 
    */

    R1 = JOINTURE(Utilisateur, Personne, Utilisateur.user_id = Personne.user_id )
    R2 = JOINTURE(Utilisateur, Communaute, Utilisateur.user_id = Communaute.communaute_id)
    R3 = JOINTURE EXTERNE(R1, R2, R1.user_id = R2.communaute_id) // On joint les deux tables
    R4 = PRODUIT(R3 AS R3A, R3 AS R3B)
    R5 = PROJECTION(R4, 
    R4.R3A.user_id, 
    R4.R3A.Personne.prenom, 
    R4.R3A.Personne.nom, 
    R4.R3A.communaute_id,
    R4.R3A.communaute.nom,
    R4.R3A.description,
    R4.R3A.longitude - R4.R3B.longitude AS long_diff,
    R4.R3A.latitude - R4.R3B.latitude AS lat_diff,
    )
    vProche = RESTRICTION(R5, R5.long_diff >= -0,53902 AND R5.long_diff <= 0,53902 
    AND R5.lat_diff >= -0,53902 AND R5.lat_diff <= 0,53902)

Vue service Commercialisé :
    R1 = RESTRICTION(Service, service.type='AC')
    vServiceC = PROJECTION(R1, Service.id, Service.nom, Service.description, Service.date_publication, Service.montant)

Vue service avec contrepartie :
    R1 = RESTRICTION(Service, Service.type = 'CP' AND Service.desc_contre_partie NOT NULL)
    R2 = PROJECTION(R1, R1.service_id, R1.nom, R1.description, R1.date_publication, R1.desc_contre_partie)
    R3 = RESTRICTION(Service, Service.type = 'CP' AND Service.contre_partie NOT NULL)
    R4 = JOINTURE(Service, R3, Service.service_id = R3.service_id)
    R5 = PROJECTION(R4, service_id = R4.Service.service_id, nom = R4.Service.nom, description = R4.Service.description, date_publication = Service.date_publication, cp_service_id = R4.R3.service_id, cp_nom = R4.R3.nom, cp_description = R4.R3.description, cp_date_publication = R4.R3.date_publication)
    vServiceCP = UNION(R2,R5)
    
Vue service sans contrepartie :
    R1 = RESTRICTION(Service, service.type = 'SC')
    R2 = PROJECTION(R1, Service.service_id, Service.nom, Service.description, Service.date_publication)

